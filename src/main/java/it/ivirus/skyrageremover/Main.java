package it.ivirus.skyrageremover;


import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import it.ivirus.skyrageremover.jar.JarCleaner;
import it.ivirus.skyrageremover.system.OperatingSystem;
import it.ivirus.skyrageremover.system.SystemCleaner;

public class Main {


    private static void printWelcomeMessage(int nThreads) {
        System.out.println();
        System.out.println(":::    :::  ::::::::  :::    ::: ::::::::::: :::::::::::     :::     ");
        System.out.println(":+:    :+: :+:    :+: :+:    :+:     :+:         :+:       :+: :+:   ");
        System.out.println("+:+    +:+ +:+    +:+  +:+  +:+      +:+         +:+      +:+   +:+  ");
        System.out.println("+#++:++#++ +#+    +:+   +#++:+       +#+         +#+     +#++:++#++: ");
        System.out.println("+#+    +#+ +#+    +#+  +#+  +#+      +#+         +#+     +#+     +#+ ");
        System.out.println("#+#    #+# #+#    #+# #+#    #+#     #+#     #+# #+#     #+#     #+# ");
        System.out.println("###    ###  ########  ###    ### ###########  #####      ###     ### ");
        System.out.println();
        System.out.println("Running on: " + nThreads + " threads");
        System.out.println(ConsoleColors.YELLOW + "Current jar is excluded from scan." + ConsoleColors.RESET);
        System.out.println(ConsoleColors.CYAN + "Developer: iVirus_");
        System.out.println("Telegram: https://t.me/HoxijaChannel");
        System.out.println("Discord: https://discord.io/hoxija");
        System.out.println("Version: 1.6.1" + ConsoleColors.RESET);
        System.out.println();
    }

    public static void main(String[] args) throws Throwable {
        ExecutorService executor;
        int nThreads = 4;

        if (args.length == 0){
            executor = Executors.newFixedThreadPool(nThreads);
        } else {
            try {
                nThreads = Integer.parseInt(args[0]);
                executor = Executors.newFixedThreadPool(nThreads);
            } catch (NumberFormatException ex){
                System.out.println("Invalid value for threads, using default: " + nThreads);
                executor = Executors.newFixedThreadPool(nThreads);
            }
        }

        printWelcomeMessage(nThreads);

        Options options = Options.readOptions();

        if (options.isCleanJars()) {
            System.out.println("Searching jars...");
            System.out.println();

            List<File> infectedJars = JarCleaner.findAllJars(new File("someFile").getAbsoluteFile().getParentFile());

            System.out.println();
            System.out.println("Total jars to scan: " + infectedJars.size());
            System.out.println();

            System.out.println();
            System.out.println("Checking and cleaning jars...");
            System.out.println();

            long before = System.currentTimeMillis();
            for (File jar : infectedJars) {
                executor.submit(() -> {
                    System.out.print("Cleaning " + jar.getName() + "...");
                    try {
                        JarCleaner.cleanJar(jar, options.isReplaceJars());
                    } catch (IOException | URISyntaxException e) {
                        throw new RuntimeException(e);
                    }
                    System.out.println(" [DONE]");
                });
            }
            executor.shutdown();
            executor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);

            long cleanTime = (System.currentTimeMillis() - before);
            String timeUnit = "ms";
            if (cleanTime > 999) {
                cleanTime = cleanTime/1000;
                timeUnit = "s";
            }
            System.out.println("Clean finished in " + cleanTime + timeUnit + ".");

            if (!JarCleaner.getInfectedFileNames().isEmpty()) {
                System.out.println("List of files that were infected and are now clean:");
                for (String fileName : JarCleaner.getInfectedFileNames()) {
                    System.out.println(ConsoleColors.GREEN + fileName + ConsoleColors.RESET);
                }
            }
        }

        if (options.isCleanSystem()) {
            System.out.println();
            System.out.println("Cleaning system...");
            System.out.println();

            OperatingSystem system = OperatingSystem.getSystem();
            SystemCleaner cleaner = system.getCleaner();
            SystemInfectionType infectionType = cleaner.getInfectionType();
            if (infectionType != SystemInfectionType.CLEAN) {
                System.out.println("Your system seems to be compromised by Skyrage malware.");
                System.out.println("I'm cleaning your OS.");
                cleaner.clean(infectionType);
            } else {
                System.out.println("Your system does not seems to be compromised by Skyrage malware.");
            }
        }
    }
}
