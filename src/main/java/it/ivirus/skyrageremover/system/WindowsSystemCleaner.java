package it.ivirus.skyrageremover.system;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.util.Enumeration;
import java.util.List;
import java.util.Optional;
import java.util.jar.JarFile;
import java.util.zip.ZipEntry;

import org.objectweb.asm.ClassReader;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.FieldNode;

import it.ivirus.skyrageremover.jar.JarCleaner;

public class WindowsSystemCleaner implements SystemCleaner {

	File compromisedFile;

	@Override
	public boolean isInfected() throws IOException {
		BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec("wmic startup get caption,command").getInputStream()));
		String line;
		while (true) {
			line = bufferedReader.readLine();
			if (line == null) return false;

			if (!line.contains("javaw")) {
				return false;
			}

			return isCheckedCompromised();
		}
	}
	
	@Override
	public void clean() throws IOException {
		if (compromisedFile.canWrite()) {
			Files.deleteIfExists(compromisedFile.toPath());
			System.out.println("Your system is now clean!");
		} else {
			System.err.println("YOU ARE STILL INFECTED. CHECK IF YOU HAVE PERMISSION TO WRITE TO FILES: " + System.getenv("APPDATA") + File.separator + "Microsoft" + File.separator + "Windows" + File.separator + "Start Menu" + File.separator + "Programs" + File.separator + "Startup");
		}
	}

	private boolean isCheckedCompromised() throws IOException {
		File directory = new File(System.getenv("APPDATA") + File.separator + "Microsoft" + File.separator + "Windows" + File.separator + "Start Menu" + File.separator + "Programs" + File.separator + "Startup");
		List<File> files = JarCleaner.findAllJars(directory);
		for (File file : files) {
			try (JarFile jarFile = new JarFile(file)) {
				Enumeration<? extends ZipEntry> entries = jarFile.entries();
				
				String eventuallyMainClass = Optional.ofNullable(jarFile.getManifest()).map(m -> m.getMainAttributes().getValue("Main-Class")).map(s -> s.replace(".", "/")).orElse(null);

				while (entries.hasMoreElements()) {
					ZipEntry zipEntry = entries.nextElement();
					zipEntry.setCompressedSize(-1L);
					if (zipEntry.getName().endsWith(".class")) {
						try (InputStream in = jarFile.getInputStream(zipEntry)) {
							ClassReader classReader = new ClassReader(in);
							ClassNode classNode = new ClassNode();
							classReader.accept(classNode, 0);
							if (classNode.name == null) continue;
							if (eventuallyMainClass != null && ((classNode.name).equals(eventuallyMainClass))) {
								for (FieldNode fieldNode : classNode.fields) {
									if (fieldNode.value.toString().contains("skyrage.de")) {
										System.out.println("Your system is compromised!");
										compromisedFile = file;
										return true;
									}
								}
							}
						}
					}
				}
				return false;
			}
		}
		return false;
	}
}
